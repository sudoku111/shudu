import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;

import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.util.Scanner;

/**
 * 
 * @author hjq&jtl
 *
 */
public class Sudoku extends JFrame {
	private JPanel[] pnlGame;
	private static JTextField[][][] txtGame;
	private JTextField lastFocusTextFiled;
	private static JTextField lastDocumentListener;
	private static JTextField focus;
	private static int row, col;
	private static int[][] change;

	private FocusListener textFocusListener = new FocusListener() {
		@Override
		public void focusGained(FocusEvent e) {
			lastFocusTextFiled = (JTextField) e.getComponent();
		}

		@Override
		public void focusLost(FocusEvent e) {
			lastFocusTextFiled = (JTextField) e.getComponent();
		}
	};

//	private static DocumentListener testDocumentListener = new DocumentListener() {
//		@Override
//		public void removeUpdate(DocumentEvent e) {

//		}
//
//		@Override
	// public void insertUpdate(DocumentEvent e) {

	// try {
	// lastDocumentListener.setText(e.getDocument().getText(e.getDocument().getStartPosition().getOffset(),
	// e.getDocument().getLength()));
	// } catch (BadLocationException ex) {
	// ex.printStackTrace();
	// }
	// }

	// @Override
	// public void changedUpdate(DocumentEvent e) {
//
	// }
//
//	};

	private ButtonGroup group;
	private int count;
	private static int key;
	private static int t = 3;

	public Sudoku() {
		pnlGame = new JPanel[12];
		txtGame = new JTextField[9][3][3];
		gridInit();
	}

	public void gridInit() {
		this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
		this.setSize(800, 600);
		this.setResizable(false);
		this.setTitle("Suduko");
		this.setLayout(new GridLayout(3, 4)); // set layout

		for (int i = 0; i < 12; i++) {
			if ((i + 1) % 4 != 0) {
				pnlGame[i] = new JPanel();
				pnlGame[i].setBorder(BorderFactory.createLineBorder(Color.black)); // use border to draw the grid
				pnlGame[i].setLayout(new GridLayout(3, 3));
				this.add(pnlGame[i]);
			} else if (i == 3) {
				JButton btn1 = new JButton("新游戏"); /**新游戏按钮*/
				JButton btn2 = new JButton("存档"); /**存档按钮*/
				JButton btn3 = new JButton("读档"); /**读档按钮*/
				btn1.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						String[][] n = new String[9][9];
						count++;
						try {
							n = readFromFile(String.format("%d.txt", count)); /**从文件中读取题目*/
						} catch (FileNotFoundException e1) {
							e1.printStackTrace();
						}

						// fill some numbers randomly
						for (int z = 0; z < 3; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x][y + 3 * z].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x][y + 3 * z]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
						for (int z = 3; z < 6; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x + 3][y + 3 * (z - 3)].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x + 3][y + 3 * (z - 3)]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
						for (int z = 6; z < 9; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x + 6][y + 3 * (z - 6)].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x + 6][y + 3 * (z - 6)]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
					}
				});
				btn2.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						try {
							SaveIntoFile(txtGame);
						} catch (FileNotFoundException e1) {
							e1.printStackTrace();
						}

					}
				});
				btn3.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						String[][] n = new String[9][9];
						try {
							n = readFromFile("save.txt");
						} catch (FileNotFoundException e1) {
							e1.printStackTrace();
						}
						for (int z = 0; z < 3; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x][y + 3 * z].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x][y + 3 * z]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
						for (int z = 3; z < 6; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x + 3][y + 3 * (z - 3)].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x + 3][y + 3 * (z - 3)]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
						for (int z = 6; z < 9; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x + 6][y + 3 * (z - 6)].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x + 6][y + 3 * (z - 6)]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
					}
				});
				pnlGame[i] = new JPanel();
				pnlGame[i].add(btn2);
				pnlGame[i].add(btn3);
				pnlGame[i].add(btn1);
				this.add(pnlGame[i]);
			} else if (i == 7) {
				group = new ButtonGroup();
				pnlGame[i] = new JPanel();
				addJRadioButton("易", i);
				addJRadioButton("中", i);
				addJRadioButton("难", i);
				this.add(pnlGame[i]);
			} else {

				pnlGame[i] = new JPanel();
				JButton btn3 = new JButton("提示"); /**Create JButton object*/
				JTextField time = new JTextField();
				time.setText(String.valueOf(t));
				time.setEditable(false);
				pnlGame[i].add(time);
				btn3.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						if (lastFocusTextFiled == null) {
							System.err.println("Please select a text field");
							return;
						}

						if (t > 0) {
							t--;
							time.setEditable(true);
							time.setText(String.valueOf(t));
							time.setEditable(false);
							String[][] n = new String[9][9];
							try {
								n = readFromFile(String.format("%d.txt", count + 30)); /**从文件中读取答案*/
							} catch (FileNotFoundException e1) {
								e1.printStackTrace();
							}
							/**获得需要提示的txt位置*/
							lastFocusTextFiled.setText("");// TODO
							for (int z = 0; z < 9; z++) {
								for (int x = 0; x < 3; x++) {
									for (int y = 0; y < 3; y++) {
										if (txtGame[z][x][y] == lastFocusTextFiled) {
											txtGame[z][x][y].setText(n[Cell.getX(z, x)][Cell.getY(z, y)]);
											txtGame[z][x][y].setEditable(false);
										}
									}
								}
							}

						} else {
							JFrame zero = new JFrame("错误"); /**Create Frame*/
							zero.setBounds(300, 200, 600, 500);
							zero.setVisible(true);
							zero.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
							JLabel jl2 = new JLabel("你的提示次数已用完"); /**create a label*/
							Container c = zero.getContentPane(); /**get the window*/
							c.add(jl2); /**add label to window*/
							c.setVisible(true);
						}
					}
				});
				pnlGame[i].add(btn3);
				this.add(pnlGame[i]);
			}

		}

		/**填数独*/
		int tt = 0;
		for (int z = 0; z < 9; z++) {
			if ((z + 1 + tt) % 4 == 0)
				tt++;
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					txtGame[z][x][y] = new JTextField();
					txtGame[z][x][y].addFocusListener(textFocusListener);
					txtGame[z][x][y].setBorder(BorderFactory.createEtchedBorder());
					txtGame[z][x][y].setFont(new Font("Dialog", Font.ITALIC, 20));/**Set size and font*/
					txtGame[z][x][y].setHorizontalAlignment(JTextField.CENTER);/**set position*/
					pnlGame[z + tt].add(txtGame[z][x][y]);

				}
			}
		}

		// 错误提示// TODO
//		change = new int[9][9];// 转换
//		for (int z = 0; z < 9; z++) {
//			for (int x = 0; x < 3; x++) {
//				for (int y = 0; y < 3; y++) {
//					if (!txtGame[z][x][y].getText().isEmpty())
//						change[Cell.getX(z, x)][Cell.getY(z, y)] = Integer.parseInt(txtGame[z][x][y].getText());
//					else
//						change[Cell.getX(z, x)][Cell.getY(z, y)] = 0;
//				}
//			}
//		}
//		Color color = Color.WHITE;
//		for (int z = 0; z < 9; z++) {
//			for (int x = 0; x < 3; x++) {
//				for (int y = 0; y < 3; y++) {
//					JTextField txt = txtGame[z][x][y];
//					txt.addFocusListener(textFocusListener);
//					if (txt == lastFocusTextFiled) {
//						row = Cell.getX(z, x);
//						col = Cell.getY(z, y);
//						if (!check(row, col)) {
//							color = Color.red;
//							txt.setBackground(color);
//						}
//						else
//							txt.setBackground(color);
//					}
//
//				}
//			}
//		}
		this.setVisible(true);

	}

//	public boolean check(int row, int col) {// 判断对错
//		boolean b = true;
//		for (int c = 0; c < 9; c++) {
//			if (change[row][col] == change[row][c] && col != c) {
//				b = false;
//				break;
//			}
//		}
//		for (int r = 0; r < 9; r++) {
//			if (change[row][col] == change[r][col] && row != r) {
//				b = false;
//				break;
//			}
//		}
//
//		return b;
//
//	}
	
	public static void check() { /**判断对错*/// TODO
		int countFalse = 0;

		int[][] change = new int[9][9];/**将数独内容转换成9*9int数组change */
		for (int z = 0; z < 9; z++) {
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					if (!txtGame[z][x][y].getText().isEmpty())
						change[Cell.getX(z, x)][Cell.getY(z, y)] = Integer.parseInt(txtGame[z][x][y].getText());
					else
						change[Cell.getX(z, x)][Cell.getY(z, y)] = 0;
				}
			}
		}
		int row, col;
		for (int z = 0; z < 9; z++) {
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					JTextField txt = txtGame[z][x][y];

					 
					if (txt.isEditable()) {
					txt.addFocusListener(new FocusListener(){
						   
			   			//获得焦点
			   			@Override
			   			public void focusGained(FocusEvent e) {
			   				focus.setText(txt.getText());
			   			}
			   
			   			//失去焦点
			   			@Override
			   			public void focusLost(FocusEvent e) {
			   				
			   			}
			   			
			   		});

					if (txtGame[z][x][y].getText().equals(focus.getText())) {
						row = Cell.getX(z, x);
						col = Cell.getY(z, y);
						for (int c = 0; c < 9; c++) {
							if (change[row][col] == change[row][c]) {
								countFalse++;
								break;
							}
						}
						for (int r = 0; r < 9; r++) {
							if (change[row][col] == change[r][col]) {
								countFalse++;
								break;
							}
						}

					}
				}
			}
		}

		Color color = Color.WHITE;
		if (countFalse > 0)
			color = Color.red;
		focus.setBackground(color);
		}
	}

	public static void main(String[] args) {
		new Sudoku();

		int mm = 0;
		while (end()) {
			mm++;
		}
		if (!end()) {
			JFrame end = new JFrame("结束"); /**Create Frame*/
			end.setBounds(300, 200, 600, 500);
			end.setVisible(true);
			end.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			JLabel jl = new JLabel("You Win"); /**create a label*/
			Container c = end.getContentPane(); /**get the window*/
			c.add(jl); /**add label to window*/
			c.setVisible(true);
		}
	}

	private static boolean end() {/**判断游戏是否结束*/
		int empty = 0;
		for (int z = 0; z < 9; z++) {
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					JTextField txt = txtGame[z][x][y];
					if (txt.getText().isEmpty())
						empty++;
				}
			}
		}
		return empty != 0;
	}

	public static String[][] readFromFile(String filename) throws FileNotFoundException {/**读取文件*/
		String[][] s = new String[9][9];
		File inputFile = new File(filename);
		Scanner input = new Scanner(inputFile);
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				s[i][j] = input.next();
			}
		}
		return s;

	}

	private void addJRadioButton(final String text, int i) {/**添加难度选择按钮*/
		JRadioButton radioButton = new JRadioButton(text);
		group.add(radioButton);
		pnlGame[i].add(radioButton);
		radioButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {

				if ("易".equals(text))
					count = 0;
				else if ("中".equals(text))
					count = 10;
				else if ("难".equals(text))
					count = 20;
				else
					count = 0;

			}

		});

	}


	public static void SaveIntoFile(JTextField[][][] tf) throws FileNotFoundException {/**存档*/
		String[][] s = new String[9][9];

		for (int z = 0; z < 9; z++) {
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					if (!tf[z][x][y].getText().isEmpty())
						s[Cell.getX(z, x)][Cell.getY(z, y)] = tf[z][x][y].getText();
					else
						s[Cell.getX(z, x)][Cell.getY(z, y)] = "0";

				}
			}
		}
		PrintWriter output = new PrintWriter("save.txt");
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				output.print(s[i][j] + "  ");
			}
			output.println();
		}
		output.close();
	}
}
