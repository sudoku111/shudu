import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Sudoku extends JFrame {
	private JPanel[] pnlGame;
	private JTextField[][][] txtGame;

	private ButtonGroup group;
	private int count;
	private int key;

	public Sudoku() {
		pnlGame = new JPanel[12];
		txtGame = new JTextField[9][3][3];
		gridInit();
	}

	public void gridInit() {
		this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
		this.setSize(400, 300);
		this.setResizable(false);
		this.setTitle("Suduko");
		this.setLayout(new GridLayout(3, 4)); // set layout

		for (int i = 0; i < 12; i++) {
			if ((i + 1) % 4 != 0) {
				pnlGame[i] = new JPanel();
				pnlGame[i].setBorder(BorderFactory.createLineBorder(Color.black)); // use border to draw the grid
				pnlGame[i].setLayout(new GridLayout(3, 3));
				this.add(pnlGame[i]);
			}

			else if (i == 3) {
				JButton btn1 = new JButton("新游戏"); // Create JButton object
				btn1.addActionListener(new ActionListener() {

					@Override
					public void actionPerformed(ActionEvent e) {
						String[][] n = new String[9][9];
						count++;
						try {
							n = readfromFile(String.format("%d.txt", count)); // 从文件中读取题目
						} catch (FileNotFoundException e1) {
							e1.printStackTrace();
						}

						// fill some numbers randomly
						for (int z = 0; z < 3; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x][y + 3 * z].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x][y + 3 * z]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
						for (int z = 3; z < 6; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x + 3][y + 3 * (z - 3)].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x + 3][y + 3 * (z - 3)]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
						for (int z = 6; z < 9; z++) {
							for (int x = 0; x < 3; x++) {
								for (int y = 0; y < 3; y++) {
									if (n[x + 6][y + 3 * (z - 6)].equals("0")) {
										txtGame[z][x][y].setText("");
										txtGame[z][x][y].setEditable(true);
									} else {
										txtGame[z][x][y].setText(n[x + 6][y + 3 * (z - 6)]);
										txtGame[z][x][y].setEditable(false);
									}
								}
							}
						}
					}
				});
				pnlGame[i] = new JPanel();
				pnlGame[i].add(btn1);
				this.add(pnlGame[i]);
			} else if (i == 7) {
				group = new ButtonGroup();
				pnlGame[i] = new JPanel();
				addJRadioButton("易", i);
				addJRadioButton("中", i);
				addJRadioButton("难", i);
				this.add(pnlGame[i]);
			} else {
				JButton btn3 = new JButton("cundang"); // Create JButton object
				btn3.addActionListener(new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
						System.out.print("cundanag");
					}
				});
				pnlGame[i] = new JPanel();
				pnlGame[i].add(btn3);
				this.add(pnlGame[i]);
			}
		}

		// 填数独
		int t = 0;
		for (int z = 0; z < 9; z++) {
			if ((z + 1 + t) % 4 == 0)
				t++;
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					txtGame[z][x][y] = new JTextField();
					txtGame[z][x][y].setBorder(BorderFactory.createEtchedBorder());
					txtGame[z][x][y].setFont(new Font("Dialog", Font.ITALIC, 20));// Set size and font
					txtGame[z][x][y].setHorizontalAlignment(JTextField.CENTER);// set position
					pnlGame[z + t].add(txtGame[z][x][y]);

				}
			}
		}

		this.setVisible(true);
		
		 while(end()){
				check();}
		                if(!end()) {
				 JFrame end=new JFrame("结束"); //Create Frame
				 end.setBounds(300, 200, 600, 500);
				 end.setVisible(true);
				 end.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				 JLabel jl=new JLabel("You Win"); //create a label
				  Container c=end.getContentPane(); //get the window
				  c.add(jl); //add label to window
				  c.setVisible(true);
			 }

	}

	public static void main(String[] args) {
		new Sudoku();
	}

	public void check() {
		// 判断对错

				for (int z = 0; z < 9; z++) {
					for (int x = 0; x < 3; x++) {
						for (int y = 0; y < 3; y++) {
							JTextField txt = txtGame[z][x][y];
							int b = z;
							Key(txt);
							if (key > 0) {
								txt.addFocusListener(new FocusListener() {
									int countFalse = 0;

									public void focusGained(FocusEvent e) {

										int num = Integer.parseInt(txt.getText());
										for (int i = 0; i < 9; i++) {// 判断小九宫格
											for (int j = 0; j < 9; j++) {
												if (!txtGame[b][i][j].getText().isEmpty()) {
													if (num == Integer.parseInt(txtGame[b][i][j].getText()))
														countFalse++;
													break;
												}
											}
										}
										
										Color color;
										if (countFalse > 0)
											color = Color.red;
										else
											color = Color.WHITE;
										txt.setBackground(color);

									}

									@Override
									public void focusLost(FocusEvent e) {
										// TODO Auto-generated method stub

									}
								});
							}
						}
					}
				}
	}
	
	private boolean end() {
		int empty = 0;
		for (int z = 0; z < 9; z++) {
			for (int x = 0; x < 3; x++) {
				for (int y = 0; y < 3; y++) {
					JTextField txt = txtGame[z][x][y];
					if (txt.getText().isEmpty())
						empty++;
				}
			}
		}
		return empty != 0;
	}

	public static String[][] readfromFile(String filename) throws FileNotFoundException {
		String[][] s = new String[9][9];
		File inputFile = new File(filename);
		Scanner input = new Scanner(inputFile);
		for (int i = 0; i < 9; i++) {
			for (int j = 0; j < 9; j++) {
				s[i][j] = input.next();
			}
		}
		return s;

	}

	private void addJRadioButton(final String text, int i) {
		JRadioButton radioButton = new JRadioButton(text);
		group.add(radioButton);
		pnlGame[i].add(radioButton);
		radioButton.addActionListener(new ActionListener() {

			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub

				if ("易".equals(text))
					count = 0;
				else if ("中".equals(text))
					count = 10;
				else if ("难".equals(text))
					count = 20;
				else
					count = 0;

			}

		});

	}

	private void Key(JTextField txt) {
		txt.addKeyListener(new KeyAdapter() {

			@Override
			public void keyTyped(KeyEvent e) {

			}

			@Override
			public void keyPressed(KeyEvent e) {
				int code = e.getKeyCode();
				if (code >= KeyEvent.VK_0 && code <= KeyEvent.VK_9)
					key = 1;
			}

			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub

			}
		});
	}
}
